package pdf

import (
	"encoding/base64"
	"fmt"
	"github.com/pdfcpu/pdfcpu/pkg/api"
	"github.com/pdfcpu/pdfcpu/pkg/pdfcpu"
	"io/ioutil"
)

var datasource = "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"

func StrToImg(string2 string) {
	ddd, _ := base64.StdEncoding.DecodeString(string2) //成图片文件并把文件写入到buffer
	_ = ioutil.WriteFile("temp/output.jpg", ddd, 0666) //buffer输出到jpg文件中（不做处理，直接写到文件）
	fmt.Println("转换图片成功")
}

func Sign(string2 string) {

	// Add image stamps to in.pdf using absolute scaling and a negative rotation of 90 degrees.
	wm, err := api.ImageWatermark("temp/output.jpg", "scalefactor:.5 a, rot:0,offset:250 -290", true, false, pdfcpu.POINTS)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("strint2:" + string2)
	err = api.AddWatermarksFile(string2[1:], "temp/good.pdf", nil, wm, nil)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println("水印")
}
